<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="SingleFileMode" Type="System.Boolean" Category="Options" Default="True" Description="Generate content for a complete cs file instead of just a class." %>
<%@ Property Name="ClassNamespace" Type="System.String" Category="Options" Default="BusinessObjects" Description="Namespace your class is in. Only used if SingleFileMode is true!" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<%@ Map Name="DbTypeCSharp" Src="DbType-CSharp" Description="DbType to CSharp Map" %>
<%--
Generate Entity Frame 6 entities
ref:https://zhidao.baidu.com/question/560881176.html

multiple primary keys in ef6:
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
public class Entity
{
    [Key,Column(Order = 0)]
    public int Key1 { get; set; }
 
    [Key,Column(Order = 1)]
    public string Key2{ get; set; }
 
    [Key,Column(Order = 2)]
    public string Key3{ get; set; }
    //....
}
--%>
<% if(this.SingleFileMode) { %>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace <%= this.ClassNamespace %>
{
<% } %>
	/// <summary>
	/// <%= GetClassName(SourceTable) %> entity
	/// </summary>
	public class <%= GetClassName(SourceTable) %>
	{
        <% SchemaExplorer.ColumnSchemaCollection columns = SourceTable.Columns; 
        string pkFormat = 1 < SourceTable.PrimaryKey.MemberColumns.Count ? "[Key,Column(Order = {0})]" : "[Key]";
        int primaryKeyIndex = 0;
        %>
		<% for (int i = 0; i < columns.Count; i++) { %>
        <% 
             SchemaExplorer.ColumnSchema column = columns[i];
        %>
        <% if(column.IsPrimaryKeyMember) {%>
        <%= string.Format(pkFormat, primaryKeyIndex++) %>
		[DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None)]//not autogenerate primary key value
        <% } %>
		public <%= GetCSharpPropertyType(column) %> <%= GetPropertyName(column) %> { get ; set ; }
		<% if (i < columns.Count - 1) Response.Write("\r\n"); %>		
		<% } %>
	}
<% if(this.SingleFileMode) { %>
}
<% } %>

<script runat="template">
public string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("private", column);
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += GetCSharpVariableType(column) + " " + GetMemberVariableName(column);
	
	string defaultValue = GetMemberVariableDefaultValue(column);
	if (defaultValue != "")
	{
		statement += " = " + defaultValue;
	}
	
	statement += ";";
	
	return statement;
}

public string GetReaderAssignmentStatement(ColumnSchema column, int index)
{
	string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
	statement += GetMemberVariableName(column) + " = ";
	
	if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";
	
	statement += "reader." + GetReaderMethod(column) + "(" + index.ToString() + ");";
	
	return statement;
}

public string GetCamelCaseName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}

public string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	string memberVariableName = "_" + GetCamelCaseName(propertyName);
	
	return memberVariableName;
}

public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.Table.Name + "Name") return "Name";
	if (propertyName == column.Table.Name + "Description") return "Description";
	
	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);
	
	return propertyName;
}
		
public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}


public string GetCSharpPropertyType(ColumnSchema column)
{
    string type = GetCSharpVariableType(column);
    if( !column.AllowDBNull ) return type;
	switch (column.DataType)
	{
		case DbType.Boolean:
		case DbType.Byte:
		case DbType.Currency:
		case DbType.Date:
		case DbType.DateTime:
        case DbType.DateTime2:
        case DbType.DateTimeOffset:
        case DbType.Decimal:
        case DbType.Double:
        case DbType.Int16:
        case DbType.Int32:
        case DbType.Int64:
        case DbType.SByte:
        case DbType.Single:
        case DbType.UInt16:
        case DbType.UInt32:
        case DbType.UInt64:
		{
			return type + "?";
		}
		default:
		{
			return type;
		}
	}
}

public string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;

	return DbTypeCSharp[column.DataType.ToString()];	
}

public string GetReaderMethod(ColumnSchema column)
{
	return DbDataReader[column.DataType.ToString()];
}

public string GetClassName(TableSchema table)
{
	if (table.Name.EndsWith("s"))
	{
		return table.Name.Substring(0, table.Name.Length - 1);
	}
	else
	{
		return table.Name;
	}
}

public string GetSqlDbType(ColumnSchema column)
{
	return SqlNativeSqlDb[column.NativeType.ToString()];
}

public string GetPrimaryKeyType(TableSchema table)
{
	if (table.PrimaryKey != null)
	{
		if (table.PrimaryKey.MemberColumns.Count == 1)
		{
			return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]);
		}
		else
		{
			throw new ApplicationException("This template will not work on primary keys with more than one member column.");
		}
	}
	else
	{
		throw new ApplicationException("This template will only work on tables with a primary key.");
	}
}

public override string GetFileName()
{
	return this.GetClassName(this.SourceTable) + ".cs";
}
</script>
