http://www.cnblogs.com/moveofgod/p/3540575.html
https://baike.baidu.com/item/SED/7865963

// 替换文本，I：表示不区分大小写
sed 's/delete from Analysis_Bardiagra/hehe/Ig' test-sed.txt

// 把第一行到第二行删除，替换为RRRRR
sed '1,2c RRRRR' test-sed.txt

// 只显示第一行到第三行，必须加参数 -n，否则将显示其他内容
sed -n '1,3p' test-sed.txt

// -f表示使用sed脚本文件，cat是显示文件内容到管道，cat $1是显示脚本文件第一个参数指向的内容到管道
cat $1 | sed -f migrateFieldTypeToSqlServer.sed | sed -f migrateInitDataScript.sed | sed -f primaryFunctionReplace.sed | sed -f SqlServerSymbolReplace.sed 

// sed脚本文件内部命令 开始------------------------------------------

// 说明：# 开头是注释。^&：表示行的开始和结束。[ \t]*：多个制表符。\<：词的开始。\>：词的结束。
// Id：不区分大小写删除。s///Ig：不区分大小写替换。
# commit替换
/^[ \t]*\<commit\>[ \t]*;[ \t]*$/Id
# /替换
s#^[ \t]*/[ \t]*$##g

#替换decode函数
s/\<decode\>/DBDiffPackage.StringDecode/Ig

// 小括号配合\1，\2做正则表达式的捕获。\(.*\)：捕获多个任意字符。\([a-z_]\{1,\}\)：捕获a到z和下划线...。
#用select t = s from 替换select s into t from BS_RangePartition结构
s/\<select\>[ \t]*\(.*\)[ \t]*\<into\>[ \t]*\([a-z_]\{1,\}\)[ \t]*/select \2 = \1 /Ig

#替换if结构
s/\<then\>/begin/Ig
s/\<else\>/end else begin/Ig
s/\<elsif\>/end else if/Ig
s/\<end[ \t]*if\>/end/Ig

// sed脚本文件内部命令 结束------------------------------------------



sed '1d' abc 删除 abc 档案里的第一行, 注意, 这时会显示除了第一行之外的所有行, 因为第一行已经被删除了(实际文件并没有被删除,而只是显示的时候被删除了)
sed -n '1d' abc 什么内容也不显示, 因为经过sed处理的行, 是个删除操作, 所以不现实.
sed '2,$d' abc 删除abc中从第二行到最后一行所有的内容, 注意, $符号正则表达式中表示行末尾, 但是这里并没有说那行末尾, 就会指最后一行末尾, ^开头, 如果没有指定哪行开头, 那么就是第一行开头
sed '$d' abc 只删除了最后一行, 因为并没有指定是那行末尾, 就认为是最后一行末尾

sed '/test/d' abc 文件中所有带 test 的行, 全部删除
sed '/test/a RRRRRRR' abc 将 RRRRRRR 追加到所有的带 test 行的下一行 也有可能通过行 sed '1,5c RRRRRRR' abc
sed '/test/c RRRRRRR' abc 将 RRRRRRR 替换所有带 test 的行, 当然, 这里也可以是通过行来进行替换, 比如 sed '1,5c RRRRRRR' abc




// 下面是基本命令
sed(关键字: 编辑) 以行为单位的文本编辑工具 sed可以直接修改档案, 不过一般不推荐这么做, 可以分析 standard input
基本工作方式: sed [-nef] '[动作]' [输入文本]
-n : 安静模式, 一般sed用法中, 来自stdin的数据一般会被列出到屏幕上, 如果使用-n参数后, 只有经过sed处理的那一行被列出来.
-e : 多重编辑, 比如你同时又想删除某行, 又想改变其他行, 那么可以用 sed -e '1,5d' -e 's/abc/xxx/g' filename
-f : 首先将 sed的动作写在一个档案内, 然后通过 sed -f scriptfile 就可以直接执行 scriptfile 内的sed动作 (没有实验成功, 不推荐使用)
-i : 直接编辑, 这回就是真的改变文件中的内容了, 别的都只是改变显示. (不推荐使用)
动作:
a 新增, a 后面可以接字符串, 而这个字符串会在新的一行出现. (下一行)
c 取代, c 后面的字符串, 这些字符串可以取代 n1,n2之间的行
d 删除, 后面不接任何东西
i 插入, 后面的字符串, 会在上一行出现
p 打印, 将选择的资料列出, 通常和 sed -n 一起运作 sed -n '3p' 只打印第3行
s 取代, 类似vi中的取代, 1,20s/old/new/g

[line-address]q 退出, 匹配到某行退出, 提高效率

[line-address]r 匹配到的行读取某文件 例如: sed '1r qqq' abc , 注意, 写入的文本是写在了第1行的后边, 也就是第2行

[line-address]w file, 匹配到的行写入某文件  例如: sed -n '/m/w qqq' abc , 从abc中读取带m的行写到qqq文件中, 注意, 这个写入带有覆盖性.

sed全称是：Stream EDitor
调用sed命令有两种形式：
sed [options] 'command' file(s)
sed [options] -f scriptfile file(s)
a\在当前行后面加入一行文本。
b label分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
c\用新的文本改变本行的文本。
d从模板块（Pattern space）位置删除行。
D删除模板块的第一行。
i\在当前行上面插入文本。
h拷贝模板块的内容到内存中的缓冲区。
H追加模板块的内容到内存中的缓冲区
g获得内存缓冲区的内容，并替代当前模板块中的文本。
G获得内存缓冲区的内容，并追加到当前模板块文本的后面。
l列表不能打印字符的清单。
n读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
N追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
p打印模板块的行。
P（大写）打印模板块的第一行。
q退出Sed。
r file从file中读行。
t labelif分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
T label错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
w file写并追加模板块到file末尾。
W file写并追加模板块的第一行到file末尾。
！表示后面的命令对所有没有被选定的行发生作用。
s/re/string用string替换正则表达式re。
=打印当前行号码。
#把注释扩展到下一个换行符以前。
以下的是替换标记g表示行内全面替换。
p表示打印行。
w表示把行写入一个文件。
x表示互换模板块中的文本和缓冲区中的文本。
y表示把一个字符翻译为另外的字符（但是不用于正则表达式）
选项编辑
-e command,--expression=command允许多台编辑。
-h,--help打印帮助，并显示bug列表的地址。
-n,--quiet,--silent取消默认输出。
-f,--filer=script-file引导sed脚本文件名。
-V,--version打印版本和版权信息。
元字符集编辑
^锚定行的开始如：/^sed/匹配所有以sed开头的行。
$锚定行的结束 如：/sed$/匹配所有以sed结尾的行。
.匹配一个非换行符的字符 如：/s.d/匹配s后接一个任意字符，然后是d。
*匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。
[]匹配一个指定范围内的字符，如/[Ss]ed/匹配sed和Sed。
[^]匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。
\(..\）保存匹配的字符，如s/\(love\)able/\1rs，loveable被替换成lovers。
&；保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。
\<；锚定单词的开始，如：/\<love/匹配包含以love开头的单词的行。
\>；锚定单词的结束，如/love\>/匹配包含以love结尾的单词的行。
x\{m\}重复字符x，m次，如：/0\{5\}/匹配包含5个o的行。
x\{m,\}重复字符x，至少m次，如：/o\{5,\}/匹配至少有5个o的行。
x\{m,n\}重复字符x，至少m次，不多于n次，如：/o\{5,10\}/匹配5--10个o的行。
实例编辑
删除：d命令
$ sed '2d' example-----删除example文件的第二行。
$ sed '2,$d' example-----删除example文件的第二行到末尾所有行。
$ sed '$d' example-----删除example文件的最后一行。
$ sed '/test/'d example-----删除example文件所有包含test的行。
替换：s命令
$ sed 's/test/mytest/g' example-----在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。
$ sed -n 's/^test/mytest/p' example-----(-n）选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。
$ sed 's/^192.168.0.1/&localhost/' example-----&；符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加localhost，变成192.168.0.1localhost。
$ sed -n 's/\(love\)able/\1rs/p' example-----love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。
$ sed 's#10#100#g' example-----不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。
选定行的范围：逗号
$ sed -n '/test/,/check/p' example-----所有在模板test和check所确定的范围内的行都被打印。
$ sed -n '5,/^test/p' example-----打印从第五行开始到第一个包含以test开始的行之间的所有行。
$ sed '/test/,/check/s/$/sed test/' example-----对于模板test和check之间的行，每行的末尾用字符串sed test替换。
多点编辑：e命令
$ sed -e '1,5d' -e 's/test/check/' example-----(-e）选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。
$ sed --expression='s/test/check/' --expression='/love/d' example-----一个比-e更好的命令是--expression。它能给sed表达式赋值。
从文件读入：r命令
$ sed '/test/r file' example-----file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。
写入文件：w命令
$ sed -n '/test/w file' example-----在example中所有包含test的行都被写入file里。
追加命令：a命令
$ sed '/^test/a\\--->this is a example' example<-----'this is a example'被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。
插入：i命令
$ sed '/test/i\\
new line
-------------------------' example
如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。
下一个：n命令
$ sed '/test/{ n; s/aa/bb/; }' example-----如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。
变形：y命令
$ sed '1,10y/abcde/ABCDE/' example-----把1--10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。
退出：q命令
$ sed '10q' example-----打印完第10行后，退出sed。
保持和获取：h命令和G命令
$ sed -e '/test/h' -e '/$/G' example-----在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现 在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。
保持和互换：h命令和x命令
$ sed -e '/test/h' -e '/check/x' example -----互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。